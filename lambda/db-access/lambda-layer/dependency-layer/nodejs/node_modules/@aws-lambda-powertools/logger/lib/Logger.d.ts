import type { Context } from 'aws-lambda';
import { Utility } from '@aws-lambda-powertools/commons';
import type { ClassThatLogs, HandlerMethodDecorator, LogAttributes, ConstructorOptions, LogItemExtraInput, LogItemMessage, LogLevel, HandlerOptions } from './types';
declare class Logger extends Utility implements ClassThatLogs {
    private console;
    private customConfigService?;
    private envVarsService;
    private logEvent;
    private logFormatter?;
    private logIndentation;
    private logLevel;
    private readonly logLevelThresholds;
    private logsSampled;
    private persistentLogAttributes?;
    private powertoolLogData;
    get level(): number;
    constructor(options?: ConstructorOptions);
    addContext(context: Context): void;
    addPersistentLogAttributes(attributes?: LogAttributes): void;
    appendKeys(attributes?: LogAttributes): void;
    createChild(options?: ConstructorOptions): Logger;
    critical(input: LogItemMessage, ...extraInput: LogItemExtraInput): void;
    debug(input: LogItemMessage, ...extraInput: LogItemExtraInput): void;
    error(input: LogItemMessage, ...extraInput: LogItemExtraInput): void;
    getLevelName(): Uppercase<LogLevel>;
    getLogEvent(): boolean;
    getLogsSampled(): boolean;
    getPersistentLogAttributes(): LogAttributes;
    info(input: LogItemMessage, ...extraInput: LogItemExtraInput): void;
    injectLambdaContext(options?: HandlerOptions): HandlerMethodDecorator;
    static injectLambdaContextAfterOrOnError(logger: Logger, initialPersistentAttributes: LogAttributes, options?: HandlerOptions): void;
    static injectLambdaContextBefore(logger: Logger, event: unknown, context: Context, options?: HandlerOptions): void;
    logEventIfEnabled(event: unknown, overwriteValue?: boolean): void;
    refreshSampleRateCalculation(): void;
    removeKeys(keys: string[]): void;
    removePersistentLogAttributes(keys: string[]): void;
    setLogLevel(logLevel: LogLevel): void;
    setPersistentLogAttributes(attributes: LogAttributes): void;
    setSampleRateValue(sampleRateValue?: number): void;
    shouldLogEvent(overwriteValue?: boolean): boolean;
    warn(input: LogItemMessage, ...extraInput: LogItemExtraInput): void;
    protected createLogger(options?: ConstructorOptions): Logger;
    protected shouldPrint(logLevel: number): boolean;
    private addToPowertoolLogData;
    private createAndPopulateLogItem;
    private getCustomConfigService;
    private getEnvVarsService;
    private getLogFormatter;
    private getLogLevelNameFromNumber;
    private getPowertoolLogData;
    private getReplacer;
    private getSampleRateValue;
    private isValidLogLevel;
    private printLog;
    private processLogItem;
    private setConsole;
    private setCustomConfigService;
    private setEnvVarsService;
    private setInitialLogLevel;
    private setLogEvent;
    private setLogFormatter;
    private setLogIndentation;
    private setLogsSampled;
    private setOptions;
    private setPowertoolLogData;
}
export { Logger };
//# sourceMappingURL=Logger.d.ts.map