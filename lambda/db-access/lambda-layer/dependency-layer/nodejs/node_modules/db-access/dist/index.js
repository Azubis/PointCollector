"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const logger_1 = require("@aws-lambda-powertools/logger");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const postgresql_client_1 = require("postgresql-client");
const logging_util_1 = require("./logging-util");
const fs_1 = require("fs");
const PointCollectorLogFormatter_1 = require("./PointCollectorLogFormatter");
const resolveSecret = async (secretsManager, secretId) => {
    const secretValue = await secretsManager.getSecretValue({
        SecretId: secretId
    });
    if (secretValue.SecretString === undefined) {
        throw new Error(`No secret string for ${secretId}`);
    }
    const secret = JSON.parse(secretValue.SecretString);
    return secret;
};
const getConnection = (secret) => new postgresql_client_1.Connection({
    host: secret.host,
    port: secret.port,
    user: secret.username,
    password: secret.password,
    database: secret.dbname,
    ssl: {
        rejectUnauthorized: false,
        ca: (0, fs_1.readFileSync)('./eu-west-1-bundle.cert').toString() // cert from https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html
    }
});
const logger = new logger_1.Logger({ serviceName: (0, logging_util_1.serviceName)('db-setup'), logFormatter: new PointCollectorLogFormatter_1.PointCollectorLogFormatter() });
const handler = async (event, context) => {
    logger.info('EVENT: \n' + JSON.stringify(event, null, 2));
    logger.addContext(context);
    if (process.env.REGION === undefined ||
        process.env.DB_SCHEMA_NAME === undefined ||
        process.env.DB_USER_SECRET_ARN == undefined) {
        throw new Error('Missing environment variable (either REGION, DB_SECRET_ARN or DB_SCHEMA_NAME or DB_USER_SECRET_ARN');
    }
    try {
        const REGION = process.env.REGION;
        //const SCHEMA = process.env.DB_SCHEMA_NAME
        const secretsManager = new client_secrets_manager_1.SecretsManager({ region: REGION });
        const dbUserSecret = await resolveSecret(secretsManager, process.env.DB_USER_SECRET_ARN);
        logger.info('Opening connection...');
        const connection = getConnection(dbUserSecret);
        await connection.connect();
        const queries = event.queries;
        for (const query of queries) {
            if (query.startsWith('#')) {
                console.log('Skipping query: ' + query);
                continue;
            }
            console.log('Executing query: ' + query);
            const result = await connection.query(query);
            console.log(JSON.stringify(result, null, 2));
        }
        await connection.close();
    }
    catch (error) {
        logger.error('error', (0, logging_util_1.logData)(error));
        throw error;
    }
    return {
        PhysicalResourceId: 'DBAccess',
        Data: {
            Response: 'Successfully executed statements'
        }
    };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQW9EO0FBRXBELDRFQUErRDtBQUMvRCx5REFBNkM7QUFDN0MsaURBQW9EO0FBQ3BELDJCQUFnQztBQUNoQyw2RUFBMEU7QUFpQjFFLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxjQUE4QixFQUFFLFFBQWdCLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFdBQVcsR0FBRyxNQUFNLGNBQWMsQ0FBQyxjQUFjLENBQUM7UUFDcEQsUUFBUSxFQUFFLFFBQVE7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsSUFBSSxXQUFXLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDdkQsQ0FBQztJQUNELE1BQU0sTUFBTSxHQUF3QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUN4RSxPQUFPLE1BQU0sQ0FBQTtBQUNqQixDQUFDLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQTJCLEVBQWMsRUFBRSxDQUFDLElBQUksOEJBQVUsQ0FBQztJQUM5RSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7SUFDakIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0lBQ2pCLElBQUksRUFBRSxNQUFNLENBQUMsUUFBUTtJQUNyQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7SUFDekIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNO0lBQ3ZCLEdBQUcsRUFBRTtRQUNELGtCQUFrQixFQUFFLEtBQUs7UUFDekIsRUFBRSxFQUFFLElBQUEsaUJBQVksRUFBQyx5QkFBeUIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLCtGQUErRjtLQUN6SjtDQUNKLENBQUMsQ0FBQztBQUVILE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLEVBQUMsV0FBVyxFQUFFLElBQUEsMEJBQVcsRUFBQyxVQUFVLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSx1REFBMEIsRUFBRSxFQUFDLENBQUMsQ0FBQTtBQUUxRyxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBaUIsRUFBRSxPQUFnQixFQUFFLEVBQUU7SUFDakUsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMxQixJQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLFNBQVM7UUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEtBQUssU0FBUztRQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLFNBQVMsRUFDN0MsQ0FBQztRQUNDLE1BQU0sSUFBSSxLQUFLLENBQ1gsb0dBQW9HLENBQ3ZHLENBQUE7SUFDTCxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0QsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUE7UUFDakMsMkNBQTJDO1FBQzNDLE1BQU0sY0FBYyxHQUFHLElBQUksdUNBQWMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFBO1FBRTNELE1BQU0sWUFBWSxHQUF3QixNQUFNLGFBQWEsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBRTdHLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUNwQyxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDOUMsTUFBTSxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUE7UUFFMUIsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQTtRQUM3QixLQUFLLE1BQU0sS0FBSyxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQzFCLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxDQUFBO2dCQUN2QyxTQUFRO1lBQ1osQ0FBQztZQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDLENBQUE7WUFDeEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDaEQsQ0FBQztRQUVELE1BQU0sVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBQSxzQkFBTyxFQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7UUFDckMsTUFBTSxLQUFLLENBQUE7SUFDZixDQUFDO0lBR0QsT0FBTztRQUNILGtCQUFrQixFQUFFLFVBQVU7UUFDOUIsSUFBSSxFQUFFO1lBQ0YsUUFBUSxFQUFFLGtDQUFrQztTQUMvQztLQUNKLENBQUE7QUFDTCxDQUFDLENBQUE7QUFoRFksUUFBQSxPQUFPLFdBZ0RuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9nZ2VyfSBmcm9tICdAYXdzLWxhbWJkYS1wb3dlcnRvb2xzL2xvZ2dlcidcbmltcG9ydCB7Q29udGV4dH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQge1NlY3JldHNNYW5hZ2VyfSBmcm9tICdAYXdzLXNkay9jbGllbnQtc2VjcmV0cy1tYW5hZ2VyJztcbmltcG9ydCB7Q29ubmVjdGlvbn0gZnJvbSAncG9zdGdyZXNxbC1jbGllbnQnO1xuaW1wb3J0IHtsb2dEYXRhLCBzZXJ2aWNlTmFtZX0gZnJvbSAnLi9sb2dnaW5nLXV0aWwnO1xuaW1wb3J0IHtyZWFkRmlsZVN5bmN9IGZyb20gJ2ZzJztcbmltcG9ydCB7IFBvaW50Q29sbGVjdG9yTG9nRm9ybWF0dGVyIH0gZnJvbSAnLi9Qb2ludENvbGxlY3RvckxvZ0Zvcm1hdHRlcic7XG5cbmludGVyZmFjZSBEYXRhYmFzZVNlY3JldFZhbHVlIHtcbiAgICB1c2VybmFtZTogc3RyaW5nXG4gICAgcGFzc3dvcmQ6IHN0cmluZ1xuICAgIGhvc3Q6IHN0cmluZ1xuICAgIHBvcnQ6IG51bWJlclxuICAgIGVuZ2luZTogc3RyaW5nXG4gICAgZGJuYW1lOiBzdHJpbmdcbiAgICBtYXN0ZXJhcm46IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgSW5wdXRFdmVudCB7XG4gICAgcXVlcmllczogc3RyaW5nW11cbn1cblxuXG5jb25zdCByZXNvbHZlU2VjcmV0ID0gYXN5bmMgKHNlY3JldHNNYW5hZ2VyOiBTZWNyZXRzTWFuYWdlciwgc2VjcmV0SWQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHNlY3JldFZhbHVlID0gYXdhaXQgc2VjcmV0c01hbmFnZXIuZ2V0U2VjcmV0VmFsdWUoe1xuICAgICAgICBTZWNyZXRJZDogc2VjcmV0SWRcbiAgICB9KVxuICAgIGlmIChzZWNyZXRWYWx1ZS5TZWNyZXRTdHJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHNlY3JldCBzdHJpbmcgZm9yICR7c2VjcmV0SWR9YClcbiAgICB9XG4gICAgY29uc3Qgc2VjcmV0OiBEYXRhYmFzZVNlY3JldFZhbHVlID0gSlNPTi5wYXJzZShzZWNyZXRWYWx1ZS5TZWNyZXRTdHJpbmcpXG4gICAgcmV0dXJuIHNlY3JldFxufTtcblxuY29uc3QgZ2V0Q29ubmVjdGlvbiA9IChzZWNyZXQ6IERhdGFiYXNlU2VjcmV0VmFsdWUpOiBDb25uZWN0aW9uID0+IG5ldyBDb25uZWN0aW9uKHtcbiAgICBob3N0OiBzZWNyZXQuaG9zdCxcbiAgICBwb3J0OiBzZWNyZXQucG9ydCxcbiAgICB1c2VyOiBzZWNyZXQudXNlcm5hbWUsXG4gICAgcGFzc3dvcmQ6IHNlY3JldC5wYXNzd29yZCxcbiAgICBkYXRhYmFzZTogc2VjcmV0LmRibmFtZSxcbiAgICBzc2w6IHtcbiAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZSxcbiAgICAgICAgY2E6IHJlYWRGaWxlU3luYygnLi9ldS13ZXN0LTEtYnVuZGxlLmNlcnQnKS50b1N0cmluZygpIC8vIGNlcnQgZnJvbSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQW1hem9uUkRTL2xhdGVzdC9BdXJvcmFVc2VyR3VpZGUvVXNpbmdXaXRoUkRTLlNTTC5odG1sXG4gICAgfVxufSk7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoe3NlcnZpY2VOYW1lOiBzZXJ2aWNlTmFtZSgnZGItc2V0dXAnKSwgbG9nRm9ybWF0dGVyOiBuZXcgUG9pbnRDb2xsZWN0b3JMb2dGb3JtYXR0ZXIoKX0pXG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBJbnB1dEV2ZW50LCBjb250ZXh0OiBDb250ZXh0KSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oJ0VWRU5UOiBcXG4nICsgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTtcbiAgICBsb2dnZXIuYWRkQ29udGV4dChjb250ZXh0KVxuICAgIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuUkVHSU9OID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgcHJvY2Vzcy5lbnYuREJfU0NIRU1BX05BTUUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBwcm9jZXNzLmVudi5EQl9VU0VSX1NFQ1JFVF9BUk4gPT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdNaXNzaW5nIGVudmlyb25tZW50IHZhcmlhYmxlIChlaXRoZXIgUkVHSU9OLCBEQl9TRUNSRVRfQVJOIG9yIERCX1NDSEVNQV9OQU1FIG9yIERCX1VTRVJfU0VDUkVUX0FSTidcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFJFR0lPTiA9IHByb2Nlc3MuZW52LlJFR0lPTlxuICAgICAgICAvL2NvbnN0IFNDSEVNQSA9IHByb2Nlc3MuZW52LkRCX1NDSEVNQV9OQU1FXG4gICAgICAgIGNvbnN0IHNlY3JldHNNYW5hZ2VyID0gbmV3IFNlY3JldHNNYW5hZ2VyKHtyZWdpb246IFJFR0lPTn0pXG5cbiAgICAgICAgY29uc3QgZGJVc2VyU2VjcmV0OiBEYXRhYmFzZVNlY3JldFZhbHVlID0gYXdhaXQgcmVzb2x2ZVNlY3JldChzZWNyZXRzTWFuYWdlciwgcHJvY2Vzcy5lbnYuREJfVVNFUl9TRUNSRVRfQVJOKVxuXG4gICAgICAgIGxvZ2dlci5pbmZvKCdPcGVuaW5nIGNvbm5lY3Rpb24uLi4nKVxuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gZ2V0Q29ubmVjdGlvbihkYlVzZXJTZWNyZXQpXG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29ubmVjdCgpXG5cbiAgICAgICAgY29uc3QgcXVlcmllcyA9IGV2ZW50LnF1ZXJpZXNcbiAgICAgICAgZm9yIChjb25zdCBxdWVyeSBvZiBxdWVyaWVzKSB7XG4gICAgICAgICAgICBpZiAocXVlcnkuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NraXBwaW5nIHF1ZXJ5OiAnICsgcXVlcnkpXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFeGVjdXRpbmcgcXVlcnk6ICcgKyBxdWVyeSlcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbm5lY3Rpb24ucXVlcnkocXVlcnkpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDIpKVxuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5jbG9zZSgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdlcnJvcicsIGxvZ0RhdGEoZXJyb3IpKVxuICAgICAgICB0aHJvdyBlcnJvclxuICAgIH1cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgUGh5c2ljYWxSZXNvdXJjZUlkOiAnREJBY2Nlc3MnLFxuICAgICAgICBEYXRhOiB7XG4gICAgICAgICAgICBSZXNwb25zZTogJ1N1Y2Nlc3NmdWxseSBleGVjdXRlZCBzdGF0ZW1lbnRzJ1xuICAgICAgICB9XG4gICAgfVxufVxuXG4iXX0=