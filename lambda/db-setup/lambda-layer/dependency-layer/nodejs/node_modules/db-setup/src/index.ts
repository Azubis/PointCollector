import { readFileSync } from "fs"

import { Connection } from "postgresql-client"
import { SecretsManager } from "@aws-sdk/client-secrets-manager"
import { Logger } from "@aws-lambda-powertools/logger"

import { logData, serviceName } from "./logging-util"
import { PointCollectorLogFormatter } from "./PointCollectorLogFormatter"
import {CdkCustomResourceEvent, CdkCustomResourceResponse, Context} from 'aws-lambda';

interface DatabaseSecretValue {
    username: string
    password: string
    host: string
    port: number
    engine: string
    dbname: string
    masterarn: string
}

const logger = new Logger({ serviceName: serviceName("db-setup"), logFormatter: new PointCollectorLogFormatter() })

/*
    This handler will do the basic database setup.

    It creates the schema and sets up roles and users required for the service.

    This handler is idempotent, i.e. if it has run before, it will not do any changes.
*/
export const handler = async (_: CdkCustomResourceEvent, context: Context): Promise<CdkCustomResourceResponse> => {
    logger.addContext(context)

    if (
        process.env.REGION === undefined ||
        process.env.DB_SECRET_ARN === undefined ||
        process.env.DB_SCHEMA_NAME === undefined ||
        process.env.DB_USER_SECRET_ARN == undefined
    ) {
        throw new Error("Missing environment variable (either REGION, DB_SECRET_ARN or DB_SCHEMA_NAME or DB_USER_SECRET_ARN")
    }

    try {
        const REGION = process.env.REGION
        const SCHEMA = process.env.DB_SCHEMA_NAME
        const secretsManager = new SecretsManager({ region: REGION })

        const clusterSecret: DatabaseSecretValue = await resolveSecret(secretsManager, process.env.DB_SECRET_ARN)
        const dbUserSecret: DatabaseSecretValue = await resolveSecret(secretsManager, process.env.DB_USER_SECRET_ARN)

        logger.info("Opening connection...")
        const connection = getConnection(clusterSecret)
        await connection.connect()

        // According to recommendations at https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Security.html#Appendix.PostgreSQL.CommonDBATasks.Roles
        // Remove permissions on public schema
        const removePermissionsOnPublicSchemaResult = await connection.execute("REVOKE CREATE ON SCHEMA public FROM public")
        logger.info(`Revoke from public schema statement took ${removePermissionsOnPublicSchemaResult.totalTime}`)

        // Revoke permissions on public schema on our database
        const revokeOnDatabaseResult = await connection.execute(`REVOKE ALL ON DATABASE ${clusterSecret.dbname} FROM public`)
        logger.info(`Revoke from database took ${revokeOnDatabaseResult.totalTime}`)

        // Create our schema
        const schemaCreationResult = await connection.execute(`CREATE SCHEMA IF NOT EXISTS ${SCHEMA}`)
        logger.info(`Create schema statement took ${schemaCreationResult.totalTime}`)

        // Create user
        // Backend user (can do anything in the schema)
        const DB_USER = dbUserSecret.username
        const stmt = `DO\
            $do$\
            BEGIN\
                IF EXISTS (\
                    SELECT FROM pg_catalog.pg_roles\
                    WHERE  rolname = '${DB_USER}') THEN\
                    RAISE NOTICE 'Role "${DB_USER}" already exists. Skipping creation.';\
                ELSE\
                    CREATE ROLE ${DB_USER} LOGIN PASSWORD '${dbUserSecret.password}';\
                END IF;\
                GRANT CONNECT ON DATABASE ${clusterSecret.dbname} TO ${DB_USER};\
                GRANT USAGE ON SCHEMA ${SCHEMA} TO ${DB_USER};\
                GRANT ALL PRIVILEGES ON SCHEMA ${SCHEMA} TO ${DB_USER};\
            END\
            $do$;`
        const migrationUserCreationResult = await connection.execute(
            stmt
        )
        logger.info(`Create ${DB_USER} user statement took ${migrationUserCreationResult.totalTime}`)

        await connection.close()
    } catch (error) {
        logger.error("error", logData(error))
        throw error
    }

    return {
        PhysicalResourceId: "DBSetup",
        Data: {
            Response: "Successfully setup DB"
        }
    }
}

async function resolveSecret(secretsManager: SecretsManager, secretId: string) {
    const secretValue = await secretsManager.getSecretValue({
        SecretId: secretId
    })
    if (secretValue.SecretString === undefined) {
        throw new Error(`No secret string for ${secretId}`)
    }
    const secret: DatabaseSecretValue = JSON.parse(secretValue.SecretString)
    return secret
}

function getConnection(secret: DatabaseSecretValue): Connection {
    return new Connection({
        host: secret.host,
        port: secret.port,
        user: secret.username,
        password: secret.password,
        database: secret.dbname,
        ssl: {
            rejectUnauthorized: false,
            ca: readFileSync("./eu-west-1-bundle.cert").toString() // cert from https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html
        }
    })
}
