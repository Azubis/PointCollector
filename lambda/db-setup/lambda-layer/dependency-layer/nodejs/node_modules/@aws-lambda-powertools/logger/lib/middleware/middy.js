"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectLambdaContext = void 0;
const Logger_1 = require("../Logger");
const middleware_1 = require("@aws-lambda-powertools/commons/lib/middleware");
const injectLambdaContext = (target, options) => {
    const loggers = target instanceof Array ? target : [target];
    const persistentAttributes = [];
    const isClearState = options && options.clearState === true;
    const setCleanupFunction = (request) => {
        request.internal = {
            ...request.internal,
            [middleware_1.LOGGER_KEY]: injectLambdaContextAfterOrOnError,
        };
    };
    const injectLambdaContextBefore = async (request) => {
        loggers.forEach((logger, index) => {
            if (isClearState) {
                persistentAttributes[index] = {
                    ...logger.getPersistentLogAttributes(),
                };
                setCleanupFunction(request);
            }
            Logger_1.Logger.injectLambdaContextBefore(logger, request.event, request.context, options);
        });
    };
    const injectLambdaContextAfterOrOnError = async () => {
        if (isClearState) {
            loggers.forEach((logger, index) => {
                Logger_1.Logger.injectLambdaContextAfterOrOnError(logger, persistentAttributes[index], options);
            });
        }
    };
    return {
        before: injectLambdaContextBefore,
        after: injectLambdaContextAfterOrOnError,
        onError: injectLambdaContextAfterOrOnError,
    };
};
exports.injectLambdaContext = injectLambdaContext;
