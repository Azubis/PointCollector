import type { Context } from 'aws-lambda';
type Request<TEvent = unknown, TResult = unknown, TErr = Error, TContext extends Context = Context> = {
    event: TEvent;
    context: TContext;
    response: TResult | null;
    error: TErr | null;
    internal: {
        [key: string]: unknown;
    };
};
type MiddlewareFn<TEvent = unknown, TResult = unknown, TErr = Error, TContext extends Context = Context> = (request: Request<TEvent, TResult, TErr, TContext>) => unknown;
type MiddlewareLikeObj<TEvent = unknown, TResult = unknown, TErr = Error, TContext extends Context = Context> = {
    before?: MiddlewareFn<TEvent, TResult, TErr, TContext>;
    after?: MiddlewareFn<TEvent, TResult, TErr, TContext>;
    onError?: MiddlewareFn<TEvent, TResult, TErr, TContext>;
};
type MiddyLikeRequest = {
    event: unknown;
    context: Context;
    response: unknown | null;
    error: Error | null;
    internal: {
        [key: string]: unknown;
    };
};
type CleanupFunction = (request: MiddyLikeRequest) => Promise<void>;
export { MiddlewareLikeObj, MiddyLikeRequest, CleanupFunction };
//# sourceMappingURL=middy.d.ts.map