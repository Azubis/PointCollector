"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const node_crypto_1 = require("node:crypto");
const node_console_1 = require("node:console");
const commons_1 = require("@aws-lambda-powertools/commons");
const formatter_1 = require("./formatter");
const log_1 = require("./log");
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const config_1 = require("./config");
class Logger extends commons_1.Utility {
    get level() {
        return this.logLevel;
    }
    constructor(options = {}) {
        super();
        this.logEvent = false;
        this.logIndentation = 0;
        this.logLevel = 12;
        this.logLevelThresholds = {
            DEBUG: 8,
            INFO: 12,
            WARN: 16,
            ERROR: 20,
            CRITICAL: 24,
            SILENT: 28,
        };
        this.logsSampled = false;
        this.persistentLogAttributes = {};
        this.powertoolLogData = {};
        this.setOptions(options);
    }
    addContext(context) {
        const lambdaContext = {
            invokedFunctionArn: context.invokedFunctionArn,
            coldStart: this.getColdStart(),
            awsRequestId: context.awsRequestId,
            memoryLimitInMB: Number(context.memoryLimitInMB),
            functionName: context.functionName,
            functionVersion: context.functionVersion,
        };
        this.addToPowertoolLogData({
            lambdaContext,
        });
    }
    addPersistentLogAttributes(attributes) {
        (0, lodash_merge_1.default)(this.persistentLogAttributes, attributes);
    }
    appendKeys(attributes) {
        this.addPersistentLogAttributes(attributes);
    }
    createChild(options = {}) {
        const parentsOptions = {
            logLevel: this.getLevelName(),
            customConfigService: this.getCustomConfigService(),
            logFormatter: this.getLogFormatter(),
        };
        const parentsPowertoolsLogData = this.getPowertoolLogData();
        const childLogger = this.createLogger((0, lodash_merge_1.default)(parentsOptions, parentsPowertoolsLogData, options));
        const parentsPersistentLogAttributes = this.getPersistentLogAttributes();
        childLogger.addPersistentLogAttributes(parentsPersistentLogAttributes);
        if (parentsPowertoolsLogData.lambdaContext) {
            childLogger.addContext(parentsPowertoolsLogData.lambdaContext);
        }
        return childLogger;
    }
    critical(input, ...extraInput) {
        this.processLogItem(24, input, extraInput);
    }
    debug(input, ...extraInput) {
        this.processLogItem(8, input, extraInput);
    }
    error(input, ...extraInput) {
        this.processLogItem(20, input, extraInput);
    }
    getLevelName() {
        return this.getLogLevelNameFromNumber(this.logLevel);
    }
    getLogEvent() {
        return this.logEvent;
    }
    getLogsSampled() {
        return this.logsSampled;
    }
    getPersistentLogAttributes() {
        return this.persistentLogAttributes;
    }
    info(input, ...extraInput) {
        this.processLogItem(12, input, extraInput);
    }
    injectLambdaContext(options) {
        return (_target, _propertyKey, descriptor) => {
            const originalMethod = descriptor.value;
            const loggerRef = this;
            descriptor.value = async function (event, context, callback) {
                let initialPersistentAttributes = {};
                if (options && options.clearState === true) {
                    initialPersistentAttributes = {
                        ...loggerRef.getPersistentLogAttributes(),
                    };
                }
                Logger.injectLambdaContextBefore(loggerRef, event, context, options);
                let result;
                try {
                    result = await originalMethod.apply(this, [event, context, callback]);
                }
                catch (error) {
                    throw error;
                }
                finally {
                    Logger.injectLambdaContextAfterOrOnError(loggerRef, initialPersistentAttributes, options);
                }
                return result;
            };
        };
    }
    static injectLambdaContextAfterOrOnError(logger, initialPersistentAttributes, options) {
        if (options && options.clearState === true) {
            logger.setPersistentLogAttributes(initialPersistentAttributes);
        }
    }
    static injectLambdaContextBefore(logger, event, context, options) {
        logger.addContext(context);
        let shouldLogEvent = undefined;
        if (options && options.hasOwnProperty('logEvent')) {
            shouldLogEvent = options.logEvent;
        }
        logger.logEventIfEnabled(event, shouldLogEvent);
    }
    logEventIfEnabled(event, overwriteValue) {
        if (!this.shouldLogEvent(overwriteValue)) {
            return;
        }
        this.info('Lambda invocation event', { event });
    }
    refreshSampleRateCalculation() {
        this.setLogsSampled();
    }
    removeKeys(keys) {
        this.removePersistentLogAttributes(keys);
    }
    removePersistentLogAttributes(keys) {
        keys.forEach((key) => {
            if (this.persistentLogAttributes && key in this.persistentLogAttributes) {
                delete this.persistentLogAttributes[key];
            }
        });
    }
    setLogLevel(logLevel) {
        if (this.isValidLogLevel(logLevel)) {
            this.logLevel = this.logLevelThresholds[logLevel];
        }
        else {
            throw new Error(`Invalid log level: ${logLevel}`);
        }
    }
    setPersistentLogAttributes(attributes) {
        this.persistentLogAttributes = attributes;
    }
    setSampleRateValue(sampleRateValue) {
        this.powertoolLogData.sampleRateValue =
            sampleRateValue ||
                this.getCustomConfigService()?.getSampleRateValue() ||
                this.getEnvVarsService().getSampleRateValue();
    }
    shouldLogEvent(overwriteValue) {
        if (typeof overwriteValue === 'boolean') {
            return overwriteValue;
        }
        return this.getLogEvent();
    }
    warn(input, ...extraInput) {
        this.processLogItem(16, input, extraInput);
    }
    createLogger(options) {
        return new Logger(options);
    }
    shouldPrint(logLevel) {
        if (logLevel >= this.logLevel) {
            return true;
        }
        return this.getLogsSampled();
    }
    addToPowertoolLogData(...attributesArray) {
        attributesArray.forEach((attributes) => {
            (0, lodash_merge_1.default)(this.powertoolLogData, attributes);
        });
    }
    createAndPopulateLogItem(logLevel, input, extraInput) {
        const unformattedBaseAttributes = (0, lodash_merge_1.default)({
            logLevel: this.getLogLevelNameFromNumber(logLevel),
            timestamp: new Date(),
            message: typeof input === 'string' ? input : input.message,
            xRayTraceId: this.envVarsService.getXrayTraceId(),
        }, this.getPowertoolLogData());
        const logItem = new log_1.LogItem({
            baseAttributes: this.getLogFormatter().formatAttributes(unformattedBaseAttributes),
            persistentAttributes: this.getPersistentLogAttributes(),
        });
        if (typeof input !== 'string') {
            logItem.addAttributes(input);
        }
        extraInput.forEach((item) => {
            const attributes = item instanceof Error
                ? { error: item }
                : typeof item === 'string'
                    ? { extra: item }
                    : item;
            logItem.addAttributes(attributes);
        });
        return logItem;
    }
    getCustomConfigService() {
        return this.customConfigService;
    }
    getEnvVarsService() {
        return this.envVarsService;
    }
    getLogFormatter() {
        return this.logFormatter;
    }
    getLogLevelNameFromNumber(logLevel) {
        const found = Object.entries(this.logLevelThresholds).find(([key, value]) => {
            if (value === logLevel) {
                return key;
            }
        });
        return found[0];
    }
    getPowertoolLogData() {
        return this.powertoolLogData;
    }
    getReplacer() {
        const references = new WeakSet();
        return (key, value) => {
            let item = value;
            if (item instanceof Error) {
                item = this.getLogFormatter().formatError(item);
            }
            if (typeof item === 'bigint') {
                return item.toString();
            }
            if (typeof item === 'object' && value !== null) {
                if (references.has(item)) {
                    return;
                }
                references.add(item);
            }
            return item;
        };
    }
    getSampleRateValue() {
        if (!this.powertoolLogData.sampleRateValue) {
            this.setSampleRateValue();
        }
        return this.powertoolLogData.sampleRateValue;
    }
    isValidLogLevel(logLevel) {
        return typeof logLevel === 'string' && logLevel in this.logLevelThresholds;
    }
    printLog(logLevel, log) {
        log.prepareForPrint();
        const consoleMethod = logLevel === 24
            ? 'error'
            : this.getLogLevelNameFromNumber(logLevel).toLowerCase();
        this.console[consoleMethod](JSON.stringify(log.getAttributes(), this.getReplacer(), this.logIndentation));
    }
    processLogItem(logLevel, input, extraInput) {
        if (!this.shouldPrint(logLevel)) {
            return;
        }
        this.printLog(logLevel, this.createAndPopulateLogItem(logLevel, input, extraInput));
    }
    setConsole() {
        if (!this.getEnvVarsService().isDevMode()) {
            this.console = new node_console_1.Console({
                stdout: process.stdout,
                stderr: process.stderr,
            });
        }
        else {
            this.console = console;
        }
    }
    setCustomConfigService(customConfigService) {
        this.customConfigService = customConfigService
            ? customConfigService
            : undefined;
    }
    setEnvVarsService() {
        this.envVarsService = new config_1.EnvironmentVariablesService();
    }
    setInitialLogLevel(logLevel) {
        const constructorLogLevel = logLevel?.toUpperCase();
        if (this.isValidLogLevel(constructorLogLevel)) {
            this.logLevel = this.logLevelThresholds[constructorLogLevel];
            return;
        }
        const customConfigValue = this.getCustomConfigService()
            ?.getLogLevel()
            ?.toUpperCase();
        if (this.isValidLogLevel(customConfigValue)) {
            this.logLevel = this.logLevelThresholds[customConfigValue];
            return;
        }
        const envVarsValue = this.getEnvVarsService()?.getLogLevel()?.toUpperCase();
        if (this.isValidLogLevel(envVarsValue)) {
            this.logLevel = this.logLevelThresholds[envVarsValue];
            return;
        }
    }
    setLogEvent() {
        if (this.getEnvVarsService().getLogEvent()) {
            this.logEvent = true;
        }
    }
    setLogFormatter(logFormatter) {
        this.logFormatter = logFormatter || new formatter_1.PowertoolLogFormatter();
    }
    setLogIndentation() {
        if (this.getEnvVarsService().isDevMode()) {
            this.logIndentation = 4;
        }
    }
    setLogsSampled() {
        const sampleRateValue = this.getSampleRateValue();
        this.logsSampled =
            sampleRateValue !== undefined &&
                (sampleRateValue === 1 || (0, node_crypto_1.randomInt)(0, 100) / 100 <= sampleRateValue);
    }
    setOptions(options) {
        const { logLevel, serviceName, sampleRateValue, logFormatter, customConfigService, persistentLogAttributes, environment, } = options;
        this.setEnvVarsService();
        this.setConsole();
        this.setCustomConfigService(customConfigService);
        this.setInitialLogLevel(logLevel);
        this.setSampleRateValue(sampleRateValue);
        this.setLogsSampled();
        this.setLogFormatter(logFormatter);
        this.setPowertoolLogData(serviceName, environment);
        this.setLogEvent();
        this.setLogIndentation();
        this.addPersistentLogAttributes(persistentLogAttributes);
        return this;
    }
    setPowertoolLogData(serviceName, environment, persistentLogAttributes = {}) {
        this.addToPowertoolLogData({
            awsRegion: this.getEnvVarsService().getAwsRegion(),
            environment: environment ||
                this.getCustomConfigService()?.getCurrentEnvironment() ||
                this.getEnvVarsService().getCurrentEnvironment(),
            sampleRateValue: this.getSampleRateValue(),
            serviceName: serviceName ||
                this.getCustomConfigService()?.getServiceName() ||
                this.getEnvVarsService().getServiceName() ||
                this.getDefaultServiceName(),
        }, persistentLogAttributes);
    }
}
exports.Logger = Logger;
