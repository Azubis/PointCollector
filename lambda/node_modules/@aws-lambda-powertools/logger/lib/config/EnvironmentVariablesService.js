"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentVariablesService = void 0;
const commons_1 = require("@aws-lambda-powertools/commons");
class EnvironmentVariablesService extends commons_1.EnvironmentVariablesService {
    constructor() {
        super(...arguments);
        this.awsRegionVariable = 'AWS_REGION';
        this.currentEnvironmentVariable = 'ENVIRONMENT';
        this.devModeVariable = 'POWERTOOLS_DEV';
        this.functionNameVariable = 'AWS_LAMBDA_FUNCTION_NAME';
        this.functionVersionVariable = 'AWS_LAMBDA_FUNCTION_VERSION';
        this.logEventVariable = 'POWERTOOLS_LOGGER_LOG_EVENT';
        this.logLevelVariable = 'LOG_LEVEL';
        this.memoryLimitInMBVariable = 'AWS_LAMBDA_FUNCTION_MEMORY_SIZE';
        this.sampleRateValueVariable = 'POWERTOOLS_LOGGER_SAMPLE_RATE';
    }
    getAwsRegion() {
        return this.get(this.awsRegionVariable);
    }
    getCurrentEnvironment() {
        return this.get(this.currentEnvironmentVariable);
    }
    getFunctionMemory() {
        const value = this.get(this.memoryLimitInMBVariable);
        return Number(value);
    }
    getFunctionName() {
        return this.get(this.functionNameVariable);
    }
    getFunctionVersion() {
        return this.get(this.functionVersionVariable);
    }
    getLogEvent() {
        const value = this.get(this.logEventVariable);
        return this.isValueTrue(value);
    }
    getLogLevel() {
        return this.get(this.logLevelVariable);
    }
    getSampleRateValue() {
        const value = this.get(this.sampleRateValueVariable);
        return value && value.length > 0 ? Number(value) : undefined;
    }
    isDevMode() {
        const value = this.get(this.devModeVariable);
        return this.isValueTrue(value);
    }
}
exports.EnvironmentVariablesService = EnvironmentVariablesService;
